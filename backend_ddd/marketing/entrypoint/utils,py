def handle_inavlid_slabs(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        if len(cashback_slabs) == 0:
            raise ValueError("Cashback slabs cannot be empty")

        first_slab_start_amount = cashback_slabs[0][0]
        if first_slab_start_amount != 0:
            cashback_slabs.insert(
                0, [0, first_slab_start_amount, "PERCENTAGE", 0])

        # catering for the last index
        if cashback_slabs[-1][1] <= cashback_slabs[-1][0]:
            raise ValueError(
                "ending amount should be greater than starting amount")

        # catering for the last index
        if cashback_slabs[-1][3] < 0:
            raise ValueError("Cashback value cannot be negative")

        if cashback_slabs[i][2] != "PERCENTAGE" or cashback_slabs[i][2] != "ABSOLUTE":
            raise ValueError(
                "Cashback type should be either PERCENTAGE or ABSOLUTE")

        if cashback_slabs[-1][2] == "PERCENTAGE":
            if cashback_slabs[-1][3] > 1:
                raise ValueError(
                    "Cashback percentage value cannot be greater than 1")
            else:
                if cashback_slabs[-1][3] > cashback_slabs[-1][1]:
                    raise ValueError(
                        "Cashback absolute value cannot be greater than the slab ending amount")
        

        for i in range(len(cashback_slabs) - 1):
            if cashback_slabs[i][1] <= cashback_slabs[i][0]:
                raise ValueError(
                    "ending amount should be greater than starting amount")

            if cashback_slabs[i][1] != cashback_slabs[i+1][0]:
                raise ValueError("Slabs should be continuous")

            if cashback_slabs[i][3] < 0:
                raise ValueError("Cashback value cannot be negative")

            if cashback_slabs[i][2] != "PERCENTAGE" or cashback_slabs[i][2] != "ABSOLUTE":
                raise ValueError(
                    "Cashback type should be either PERCENTAGE or ABSOLUTE")

            if cashback_slabs[i][2] == "PERCENTAGE":
                if cashback_slabs[i][3] > 1:
                    raise ValueError(
                        "Cashback percentage value cannot be greater than 1")
            else:
                if cashback_slabs[i][3] > cashback_slabs[i][1]:
                    raise ValueError(
                        "Cashback absolute value cannot be greater than the slab ending amount")

        return func(*args, **kwargs)
    retrun wrapper